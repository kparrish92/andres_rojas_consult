plot = ranef_df %>%
ggplot(aes(y = grp, x = re_adjusted, fill = as.factor(color))) +
scale_fill_manual(values=c("#fa6652", "#0dbaff")) +
geom_pointrange(aes(xmin = re_hi, xmax = re_lo), size = .4, shape = 21) + geom_vline(xintercept = 0, linetype = "dashed") +
ylab("Participant ID") + xlab("Effect per participant") +
xlim(-5, 1) +
theme(text=element_text(size=10, family="Times")) +
theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(
size = 0.1,
linetype = 'solid',
colour = "grey"),
legend.position = "none") + geom_text(data = mutate_if(ranef_df, is.numeric, round, 2),
aes(label = paste(re_adjusted, "[",
re_lo, "-", re_hi,
"]"), x = Inf),
hjust = "inward", family = "Times", size = 3) +
labs(title = paste(task, paste(taps)),
subtitle = "Difference between PRE and POST Test",
caption = paste(continuous))
return(plot)
}
plot_re_2(model = pct_tap_cat, effect = "timePOST", task = "Picture Naming Task", taps = "Taps", continuous = "Categorical")
plot_re_2(model = pct_tap_cat, effect = "timePOST", task = "Picture Naming Task", taps = "Taps", continuous = "Categorical")
image_df_tidy_tap = image_df %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == 1 | no_occlusions == "a") %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a",
"approximate"))
pct_tidy_tap = image_df %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == "a" | no_occlusions == 1)  %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a", "approximate"))
pct_tidy_tap %>%
group_by(level, time, no_occlusions) %>%
summarize(mean_duration = n()) %>%
pivot_wider(names_from = time, values_from = mean_duration) %>%
select(level, no_occlusions, PRE, POST) %>%
knitr::kable()
lectura_tidy_tap = lectura %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == "a" | no_occlusions == 1)  %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a",
"approximate"))
lectura_tidy_tap %>%
group_by(level, time, no_occlusions) %>%
summarize(mean_duration = n()) %>%
pivot_wider(names_from = time, values_from = mean_duration) %>%
select(level, no_occlusions, PRE, POST) %>%
knitr::kable()
srt_tidy_tap = srt %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == "a" | no_occlusions == 1)  %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a",
"approximate"))
srt_tidy_tap %>%
group_by(level, time, no_occlusions) %>%
summarize(mean_duration = n()) %>%
pivot_wider(names_from = time, values_from = mean_duration) %>%
select(level, no_occlusions, PRE, POST) %>%
knitr::kable()
srt_tidy_tap = srt %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == "a" | no_occlusions == 1)  %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a",
"approximate"))
srt_tidy_tap %>%
group_by(level, time, no_occlusions) %>%
summarize(mean_duration = n()) %>%
pivot_wider(names_from = time, values_from = mean_duration) %>%
rename(no_occlusions = "Occlusion Type") %>%
select(level, no_occlusions, PRE, POST) %>%
knitr::kable()
srt_tidy_tap = srt %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == "a" | no_occlusions == 1)  %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a",
"approximate"))
srt_tidy_tap %>%
group_by(level, time, no_occlusions) %>%
summarize(mean_duration = n()) %>%
pivot_wider(names_from = time, values_from = mean_duration) %>%
select(level, no_occlusions, PRE, POST) %>%
knitr::kable()
srt_tidy_tap = srt %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == "a" | no_occlusions == 1)  %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a",
"approximate"))
srt_tidy_tap %>%
group_by(no_occlusions, time) %>%
summarize(n = n())
srt_tidy_tap %>%
group_by(no_occlusions, time) %>%
summarize(n = n())
srt_tidy_tap_all = srt %>%
filter(is_trill == "tap")
srt_tidy_tap_all %>%
group_by(no_occlusions, time) %>%
summarize(n = n())
tab_model(srt_tap_cat, dv.labels = "Probability of approximate realization")
plot_model(srt_tap_cat, title = "Probability of approximate realization") + theme(text=element_text(size=10, family="Times"))
plot_re(model = srt_tap_cat, effect = "timePOST", task = "Sentence Reading Task", taps = "Taps", continuous = "Categorical") + xlim(-7,7)
plot_re(model = srt_tap_cat, effect = "timePOST", task = "Sentence Reading Task", taps = "Taps", continuous = "Categorical") + xlim(-7,7)
plot_re_2(model = pct_tap_cat, effect = "timePOST", task = "Picture Naming Task", taps = "Taps", continuous = "Categorical")
plot_model(lectura_tap_cat, title = "Probability of approximate realization") + theme(text=element_text(size=10, family="Times"))
plot_model(pct_tap_cat, title = "Probability of approximate realization") + theme(text=element_text(size=10, family="Times")) + xlim(-2, 2)
plot_model(pct_tap_cat, title = "Probability of approximate realization") + theme(text=element_text(size=10, family="Times")) + xlim(-2, 2)
View(srt_trill_mod)
View(srt_tidy_trill)
View(srt_trill_mod)
list_of_files <- list.files(path = here("data", "raw"), recursive = TRUE,
pattern = "\\.csv$",
full.names = TRUE) %>%
as.data.frame()
library(here)
library(tidyverse)
library(janitor)
library(fs)
# A script to tidy individual participant data for the sentence reading task
# Libraries
# 01 - a script to pull the data for para only in the sentence reading task
library(here)
library(tidyverse)
library(janitor)
library(fs)
list_of_files <- list.files(path = here("data", "raw"), recursive = TRUE,
pattern = "\\.csv$",
full.names = TRUE) %>%
as.data.frame()
df_f <- character()
for(thisRun in 1:nrow(list_of_files))
{
df <- read.csv(list_of_files$.[thisRun]) %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
select(c(1:6)) %>%
dplyr::slice(1:158) %>%
mutate("id" = list_of_files$.[thisRun]) %>%
mutate(col = 1:158)
colnames(df) <- c('sentence','token1','token2', 'duration1','duration2',
'occlusions', 'id', 'trial')
df_f <- rbind(df_f, df)
}
empty_as_na <- function(x){
if("factor" %in% class(x)) x <- as.character(x) ## since ifelse wont work with factors
ifelse(as.character(x)!="", x, NA)
}
srt_tidy <- df_f %>%
mutate_each(funs(empty_as_na)) %>%
mutate(is_trill = case_when(!is.na(duration1) ~ "tap",
!is.na(duration2) ~ "trill")) %>%
unite("duration", duration1:duration2) %>%
unite("token", token1:token2) %>%
mutate(duration = str_remove(duration, "NA_")) %>%
mutate(duration = str_remove(duration, "_NA")) %>%
mutate(token = str_remove(token, "_NA")) %>%
mutate(token = str_remove(token, "NA_")) %>%
filter(!is.na(duration)) %>%
mutate(id =
str_remove(id, "/Users/kyleparrish/Documents/GitHub/andres_rojas_consult/data/raw/")) %>%
mutate(id = str_remove(id, ".csv")) %>%
separate(id, into = c("participant", "level", "time"))
srt_tidy %>%
group_by(participant, time, is_trill, level) %>%
summarize(n = n())
# check the new data loaded successfully
srt_tidy %>%
group_by(level, participant) %>%
summarize(n = n())
srt_tidy = srt_tidy %>%
mutate(no_occlusions = substr(occlusions, 1, 1))
srt_tidy = srt_tidy %>%
mutate("level_2" = level) %>%
unite("participant", level, participant, sep = "_") %>%
rename(level = level_2) %>%
filter(!is.na(duration)) %>%
filter(!duration == "N/A /d/") %>%
filter(!duration == "N/A") %>%
filter(!duration == "NA") %>%
filter(!duration == "23_126") %>%
mutate(level = replace(level, level == "sp203" | level == "sp204", "sp203/204"))
srt_tidy %>%
write.csv(here("data", "tidy", "srt_data.csv"))
View(srt_tidy)
source(here("scripts", "00_helpers.R"))
source(here("scripts", "05_load_data.R"))
View(para)
View(nmc_trill_cont_pct)
View(lectura)
View(image_df)
View(srt)
citation()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
pct_tidy_tap = image_df %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == "a" | no_occlusions == 1)  %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a", "approximant"))
pct_tidy_tap %>%
group_by(level, time, no_occlusions) %>%
summarize(mean_duration = n()) %>%
pivot_wider(names_from = time, values_from = mean_duration) %>%
select(level, no_occlusions, PRE, POST) %>%
knitr::kable()
image_df %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == "a" | no_occlusions == 1)  %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a", "approximant"))
level_order <- c('PRE', 'POST')
pct_tidy_tap %>%
ggplot(aes(x = no_occlusions, fill = factor(time, level = level_order))) +
scale_fill_manual(values=c("#fa6652", "#0dbaff")) +
geom_bar(position = "dodge", color = "black") +
facet_grid(vars(level), vars(factor(time, level = level_order))) +
xlab("Number of Occlusions") +
theme(text=element_text(size=10, family="Times")) +
theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(
size = 0.1,
linetype = 'solid',
colour = "grey"),
legend.position = "none") +
theme(panel.spacing = unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
plot_model(pct_tap_cat, title = "Probability of approximant realization") + theme(text=element_text(size=10, family="Times"))
library(sjPlot)
plot_model(pct_tap_cat, title = "Probability of approximant realization") + theme(text=element_text(size=10, family="Times"))
plot_model(pct_tap_cat, title = "Probability of approximant realization") + theme(text=element_text(size=10, family="Times")) + xlim(-4,4)
plot_model(pct_tap_cat, title = "Probability of approximant realization") + theme(text=element_text(size=10, family="Times")) + xlim(-4,4)
plot_model(pct_tap_cat, title = "Probability of approximant realization") + theme(text=element_text(size=10, family="Times")) + xlim(-4,4)
plot_model(pct_tap_cat, title = "Probability of approximant realization") + theme(text=element_text(size=10, family="Times")) + ylim(-4,4)
plot_model(pct_tap_cat, title = "Probability of approximant realization") + theme(text=element_text(size=10, family="Times")) + ylim(-2,2)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
srt %>%
filter(is_trill == "tap") %>%
group_by(level, time) %>%
summarize(mean_duration = paste0(round(mean(as.numeric(duration)), digits = 2), " (",round(sd(as.numeric(duration)), digits = 2),")")) %>%
pivot_wider(names_from = time, values_from = mean_duration) %>%
select(level, PRE, POST) %>%
knitr::kable(caption = "Mean and Standard deviation of taps by each level at PRE and POST tests")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
srt %>%
filter(is_trill == "tap") %>%
group_by(level, time) %>%
summarize(mean_duration = paste0(round(mean(as.numeric(duration)), digits = 2), " (",round(sd(as.numeric(duration)), digits = 2),")")) %>%
pivot_wider(names_from = time, values_from = mean_duration) %>%
select(level, PRE, POST) %>%
knitr::kable(caption = "Mean and Standard deviation of taps by each level at PRE and POST tests", format = pandoc)
srt %>%
filter(is_trill == "tap") %>%
group_by(level, time) %>%
summarize(mean_duration = paste0(round(mean(as.numeric(duration)), digits = 2), " (",round(sd(as.numeric(duration)), digits = 2),")")) %>%
pivot_wider(names_from = time, values_from = mean_duration) %>%
select(level, PRE, POST) %>%
knitr::kable(caption = "Mean and Standard deviation of taps by each level at PRE and POST tests", format = "pandoc")
srt %>%
filter(is_trill == "trill") %>%
group_by(level, time) %>%
summarize(mean_duration = paste0(round(mean(as.numeric(duration)), digits = 2), " (",round(sd(as.numeric(duration)), digits = 2),")")) %>%
pivot_wider(names_from = time, values_from = mean_duration) %>%
select(level, PRE, POST) %>%
knitr::kable(caption = "Mean and Standard deviation of trills by each level at PRE and POST tests")
level_order <- c('POST', 'PRE')
srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
filter(is_trill == "tap") %>%
ggplot(aes(y = factor(time, level = level_order), x = as.numeric(duration), color = is_trill)) + geom_boxplot(fill = "deepskyblue4", color = "black", outlier.size = 0) +
facet_grid(~level) + ylab("Test Time") + xlab("Rhotic Duration (ms)") +
xlim(0, 100) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") + theme(legend.position = "none") + ggtitle("SRT: Duration of Taps by each group")
level_order <- c('POST', 'PRE')
srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
filter(is_trill == "tap") %>%
ggplot(aes(y = factor(time, level = level_order), x = as.numeric(duration), color = is_trill)) + geom_boxplot(fill = "deepskyblue4", color = "black", outlier.size = 0) +
facet_grid(~level) + ylab("Test Time") + xlab("Rhotic Duration (ms)") +
xlim(0, 100) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") + theme(legend.position = "none") + ggtitle("SRT: Duration of Taps by each group")
nmc_tap_cont %>%
mutate("Model" = c("Null", "Time", "Group",
"Time:Group Interaction")) %>%
rename("P-value" = `Pr..Chisq.`) %>%
select(Model, Chisq, Df, `P-value`) %>%
mutate(`P-value` = round(`P-value`, digits = 2)) %>%
mutate(`P-value` = replace(`P-value`, `P-value` < .05, "< .05")) %>%
dplyr::slice(2:4) %>%
knitr::kable(digits = 2)
tab_model(srt_tap_cat, dv.labels = "Probability of approximant realization")
level_order <- c('PRE', 'POST')
srt_tidy_tap %>%
ggplot(aes(x = no_occlusions, fill = factor(time, level = level_order))) +
scale_fill_manual(values=c("#fa6652", "#0dbaff")) +
geom_bar(position = "dodge", color = "black") +
facet_grid(vars(level), vars(factor(time, level = level_order))) +
xlab("Number of Occlusions") +
theme(text=element_text(size=10, family="Times")) +
theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(
size = 0.1,
linetype = 'solid',
colour = "grey"),
legend.position = "none") +
theme(panel.spacing = unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
srt_tidy_tap = srt %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == "a" | no_occlusions == 1)  %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a",
"approximant"))
srt_tidy_tap %>%
group_by(level, time, no_occlusions) %>%
summarize(mean_duration = n()) %>%
pivot_wider(names_from = time, values_from = mean_duration) %>%
select(level, no_occlusions, PRE, POST) %>%
knitr::kable()
srt_tidy_tap = srt %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == "a" | no_occlusions == 1)  %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a",
"approximant"))
level_order <- c('PRE', 'POST')
srt_tidy_tap %>%
ggplot(aes(x = no_occlusions, fill = factor(time, level = level_order))) +
scale_fill_manual(values=c("#fa6652", "#0dbaff")) +
geom_bar(position = "dodge", color = "black") +
facet_grid(vars(level), vars(factor(time, level = level_order))) +
xlab("Number of Occlusions") +
theme(text=element_text(size=10, family="Times")) +
theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(
size = 0.1,
linetype = 'solid',
colour = "grey"),
legend.position = "none") +
theme(panel.spacing = unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
srt_tidy_tap = srt %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == "a" | no_occlusions == 1)  %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a",
"approximant"))
level_order <- c('PRE', 'POST')
srt_tidy_tap %>%
ggplot(aes(x = no_occlusions, fill = factor(time, level = level_order))) +
scale_fill_manual(values=c("#fa6652", "#0dbaff")) +
geom_bar(position = "dodge", color = "black") +
facet_grid(vars(level), vars(factor(time, level = level_order))) +
xlab("Number of Occlusions") +
theme(text=element_text(size=10, family="Times")) +
theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(
size = 0.1,
linetype = 'solid',
colour = "grey"),
legend.position = "none") +
theme(panel.spacing = unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
nmc_srt_tap %>%
mutate("Model" = c("Null", "Time", "Group",
"Time:Group Interaction")) %>%
rename("P-value" = `Pr..Chisq.`) %>%
select(Model, Chisq, Df, `P-value`) %>%
mutate(`P-value` = round(`P-value`, digits = 2)) %>%
mutate(`P-value` = replace(`P-value`, `P-value` < .05, "< .05")) %>%
dplyr::slice(2:4) %>%
knitr::kable(digits = 2)
nmc_srt_tap %>%
mutate("Model" = c("Null", "Time", "Group",
"Time:Group Interaction")) %>%
rename("P-value" = `Pr..Chisq.`) %>%
select(Model, Chisq, Df, `P-value`) %>%
mutate(`P-value` = round(`P-value`, digits = 2)) %>%
mutate(`P-value` = replace(`P-value`, `P-value` < .05, "< .05")) %>%
dplyr::slice(2:4) %>%
knitr::kable(digits = 2)
plot_re(model = srt_tap_mod, effect = "timePOST", task = "Sentence Reading Task", taps = "Taps", continuous = "Continuous")
plot_re(model = srt_tap_cat, effect = "timePOST", task = "Sentence Reading Task", taps = "Taps", continuous = "Categorical") + xlim(-7,7)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
plot_re(model = srt_trill_cat, effect = "timePOST", task = "Sentence Reading Task", taps = "Trills", continuous = "Categorical") + xlim(0,5) +  scale_fill_manual(values=c("#0dbaff"))
level_order <- c('PRE', 'POST')
srt_tidy_trill %>%
ggplot(aes(x = no_occlusions, fill = factor(time, level = level_order))) +
scale_fill_manual(values=c("#fa6652", "#0dbaff")) +
geom_bar(position = "dodge", color = "black") +
facet_grid(vars(level), vars(factor(time, level = level_order))) +
xlab("Number of Occlusions") +
theme(text=element_text(size=10, family="Times")) +
theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(
size = 0.1,
linetype = 'solid',
colour = "grey"),
legend.position = "none") +
theme(panel.spacing = unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
srt_tidy_tap = srt %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == "a" | no_occlusions == 1)  %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a",
"approximant"))
srt_tidy_trill = srt %>%
filter(is_trill == "trill") %>%
filter(no_occlusions == 0 | no_occlusions == 1 |
no_occlusions == 2 | no_occlusions == 3 |
no_occlusions == 4)
level_order <- c('PRE', 'POST')
p1 = srt_tidy_tap %>%
ggplot(aes(x = no_occlusions, fill = factor(time, level = level_order))) +
scale_fill_manual(values=c("#fa6652", "#0dbaff")) +
geom_bar(position = "dodge", color = "black") +
facet_grid(vars(level), vars(factor(time, level = level_order))) +
xlab("Number of Occlusions") +
theme(text=element_text(size=10, family="Times")) +
theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(
size = 0.1,
linetype = 'solid',
colour = "grey"),
legend.position = "none") +
theme(panel.spacing = unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
p2 = srt_tidy_trill %>%
ggplot(aes(x = no_occlusions, fill = factor(time, level = level_order))) +
scale_fill_manual(values=c("#fa6652", "#0dbaff")) +
geom_bar(position = "dodge", color = "black") +
facet_grid(vars(level), vars(factor(time, level = level_order))) +
xlab("Number of Occlusions") +
theme(text=element_text(size=10, family="Times")) +
theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(
size = 0.1,
linetype = 'solid',
colour = "grey"),
legend.position = "none") +
theme(panel.spacing = unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
ggarrange(p1, p2, labels = c("Taps", "Trills"))
srt_tidy_tap = srt %>%
filter(is_trill == "tap") %>%
filter(no_occlusions == "a" | no_occlusions == 1)  %>%
mutate(no_occlusions = replace(no_occlusions, no_occlusions == "a",
"approximant"))
srt_tidy_trill = srt %>%
filter(is_trill == "trill") %>%
filter(no_occlusions == 0 | no_occlusions == 1 |
no_occlusions == 2 | no_occlusions == 3 |
no_occlusions == 4)
level_order <- c('PRE', 'POST')
p1 = srt_tidy_tap %>%
ggplot(aes(x = no_occlusions, fill = factor(time, level = level_order))) +
scale_fill_manual(values=c("#fa6652", "#0dbaff")) +
geom_bar(position = "dodge", color = "black") +
facet_grid(vars(level), vars(factor(time, level = level_order))) +
xlab("Number of Occlusions") +
theme(text=element_text(size=10, family="Times")) +
theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(
size = 0.1,
linetype = 'solid',
colour = "grey"),
legend.position = "none") +
theme(panel.spacing = unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
p2 = srt_tidy_trill %>%
ggplot(aes(x = no_occlusions, fill = factor(time, level = level_order))) +
scale_fill_manual(values=c("#fa6652", "#0dbaff")) +
geom_bar(position = "dodge", color = "black") +
facet_grid(vars(level), vars(factor(time, level = level_order))) +
xlab("Number of Occlusions") +
theme(text=element_text(size=10, family="Times")) +
theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(
size = 0.1,
linetype = 'solid',
colour = "grey"),
legend.position = "none") +
theme(panel.spacing = unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
ggpubr::ggarrange(p1, p2, labels = c("Taps", "Trills"))
srt_tidy_trill = srt %>%
filter(is_trill == "trill") %>%
filter(no_occlusions == 0 | no_occlusions == 1 |
no_occlusions == 2 | no_occlusions == 3 |
no_occlusions == 4)
srt_tidy_trill %>%
group_by(level, time) %>%
summarize(mean_duration = paste0(round(mean(as.numeric(no_occlusions)), digits = 2), " (",round(sd(as.numeric(no_occlusions)), digits = 2),")")) %>%
pivot_wider(names_from = time, values_from = mean_duration) %>%
select(level, PRE, POST) %>%
knitr::kable()
**Example 5.1**
```{r}
tab_model(srt_tap_cat, dv.labels = "Probability of approximant realization")
```
tab_model(srt_trill_cat, dv.labels = "Number of Occlusions")
plot_model(pct_trill_cat, title = "Number of Occlusions") + theme(text=element_text(size=10, family="Times"))
tab_model(srt_tap_cat, dv.labels = "Probability of approximant realization")
