pivot_wider(names_from = participant, values_from = mean) %>%
arrange(desc(time)) %>%
knitr::kable(digits = 2) %>%
kable_styling(full_width = FALSE)
tap_df <- srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
group_by(participant, is_trill, time) %>%
filter(is_trill == "tap") %>%
summarize(mean = mean(as.numeric(duration))) %>%
pivot_wider(names_from = participant, values_from = mean) %>%
select(time, P1E, P3E, P5E) %>%
arrange(desc(time))
View(tap_df)
tap_df <- srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
group_by(participant, is_trill, time) %>%
filter(is_trill == "tap") %>%
summarize(mean = mean(as.numeric(duration))) %>%
pivot_wider(names_from = participant, values_from = mean) %>%
dplyr::select(time, P1E, P3E, P5E) %>%
arrange(desc(time))
tap_df <- srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
group_by(participant, is_trill, time) %>%
filter(is_trill == "tap") %>%
summarize(mean = mean(as.numeric(duration))) %>%
pivot_wider(names_from = participant, values_from = mean) %>%
dplyr::select(time, P1E, P3E, P5E) %>%
arrange(desc(time))
tap_df %>% select(time)
tap_df$is_trill <- NULL
View(tap_df)
trill_df <- srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
group_by(participant, is_trill, time) %>%
filter(is_trill == "trill") %>%
summarize(mean = mean(as.numeric(duration))) %>%
pivot_wider(names_from = participant, values_from = mean) %>%
dplyr::select(time, P1E, P3E, P5E) %>%
arrange(desc(time)) %>%
knitr::kable(digits = 2) %>%
kable_styling(full_width = FALSE)
View(srt_t_test)
run_t_test = function(df, p_id, segment)
{
t1 <- df %>%
filter(participant == p_id) %>%
filter(is_trill == segment) %>%
filter(time == "PRE")
t2 <- df %>%
filter(participant == p_id) %>%
filter(is_trill == segment) %>%
filter(time == "POST")
t1_na <- t1 %>%
filter(duration == "N/A" | duration == "N/A /d/")
t2_na <- t2 %>%
filter(duration == "N/A" | duration == "N/A /d/")
remove_list <- rbind(t1_na, t2_na)
t2_filt = t2 %>%
filter(!trial %in% remove_list$trial)
t1_filt = t1 %>%
filter(!trial %in% remove_list$trial)
t2_filt = t2_filt %>% filter(trial %in% t1_filt$trial)
t1_filt = t1_filt %>% filter(trial %in% t2_filt$trial)
t1_filt$duration <- as.numeric(t1_filt$duration)
t2_filt$duration <- as.numeric(t2_filt$duration)
test <- t.test(t2_filt$duration, t1_filt$duration, paired = TRUE)
p = test$p.value
t = test$statistic
est = test$estimate
ci_lo = test$conf.int[1]
ci_hi = test$conf.int[2]
output_df = data.frame("Participant" = p_id,
"tap_or_trill" = segment,
"p_val" = test$p.value,
"t_val" = test$statistic,
"estimate" = test$estimate,
"ci_lo" = test$conf.int[1],
"ci_hi" = test$conf.int[2])
return(output_df)
}
df = srt
t1 <- df %>%
filter(participant == p_id) %>%
filter(is_trill == segment) %>%
filter(time == "PRE")
t2 <- df %>%
filter(participant == p_id) %>%
filter(is_trill == segment) %>%
filter(time == "POST")
t1_na <- t1 %>%
filter(duration == "N/A" | duration == "N/A /d/")
t2_na <- t2 %>%
filter(duration == "N/A" | duration == "N/A /d/")
df = srt
p_id = P3E
df = srt
p_id = "P3E"
run_t_test(df, p_id, "trill")
t1 <- df %>%
filter(participant == p_id) %>%
filter(is_trill == segment) %>%
filter(time == "PRE")
segment = "trill"
t1 <- df %>%
filter(participant == p_id) %>%
filter(is_trill == segment) %>%
filter(time == "PRE")
t2 <- df %>%
filter(participant == p_id) %>%
filter(is_trill == segment) %>%
filter(time == "POST")
t1_na <- t1 %>%
filter(duration == "N/A" | duration == "N/A /d/")
t2_na <- t2 %>%
filter(duration == "N/A" | duration == "N/A /d/")
remove_list <- rbind(t1_na, t2_na)
t2_filt = t2 %>%
filter(!trial %in% remove_list$trial)
t1_filt = t1 %>%
filter(!trial %in% remove_list$trial)
t2_filt = t2_filt %>% filter(trial %in% t1_filt$trial)
t1_filt = t1_filt %>% filter(trial %in% t2_filt$trial)
t1_filt$duration <- as.numeric(t1_filt$duration)
t2_filt$duration <- as.numeric(t2_filt$duration)
test <- t.test(t2_filt$duration, t1_filt$duration, paired = TRUE)
t.test(t2_filt$duration, t1_filt$duration, paired = TRUE)
test$parameter
run_t_test = function(df, p_id, segment)
{
t1 <- df %>%
filter(participant == p_id) %>%
filter(is_trill == segment) %>%
filter(time == "PRE")
t2 <- df %>%
filter(participant == p_id) %>%
filter(is_trill == segment) %>%
filter(time == "POST")
t1_na <- t1 %>%
filter(duration == "N/A" | duration == "N/A /d/")
t2_na <- t2 %>%
filter(duration == "N/A" | duration == "N/A /d/")
remove_list <- rbind(t1_na, t2_na)
t2_filt = t2 %>%
filter(!trial %in% remove_list$trial)
t1_filt = t1 %>%
filter(!trial %in% remove_list$trial)
t2_filt = t2_filt %>% filter(trial %in% t1_filt$trial)
t1_filt = t1_filt %>% filter(trial %in% t2_filt$trial)
t1_filt$duration <- as.numeric(t1_filt$duration)
t2_filt$duration <- as.numeric(t2_filt$duration)
test <- t.test(t2_filt$duration, t1_filt$duration, paired = TRUE)
output_df = data.frame("Participant" = p_id,
"tap_or_trill" = segment,
"p_val" = test$p.value,
"df" = test$parameter,
"t_val" = test$statistic,
"estimate" = test$estimate,
"ci_lo" = test$conf.int[1],
"ci_hi" = test$conf.int[2])
return(output_df)
}
run_t_test(df, p_id, "trill")
test$parameter
C <- run_t_test(df, p_id, "trill")
View(C)
run_t_test = function(df, p_id, segment)
{
t1 <- df %>%
filter(participant == p_id) %>%
filter(is_trill == segment) %>%
filter(time == "PRE")
t2 <- df %>%
filter(participant == p_id) %>%
filter(is_trill == segment) %>%
filter(time == "POST")
t1_na <- t1 %>%
filter(duration == "N/A" | duration == "N/A /d/")
t2_na <- t2 %>%
filter(duration == "N/A" | duration == "N/A /d/")
remove_list <- rbind(t1_na, t2_na)
t2_filt = t2 %>%
filter(!trial %in% remove_list$trial)
t1_filt = t1 %>%
filter(!trial %in% remove_list$trial)
t2_filt = t2_filt %>% filter(trial %in% t1_filt$trial)
t1_filt = t1_filt %>% filter(trial %in% t2_filt$trial)
t1_filt$duration <- as.numeric(t1_filt$duration)
t2_filt$duration <- as.numeric(t2_filt$duration)
test <- t.test(t2_filt$duration, t1_filt$duration, paired = TRUE)
output_df = data.frame("Participant" = p_id,
"tap_or_trill" = segment,
"p_val" = test$p.value,
"df" = test$parameter,
"t_val" = test$statistic,
"estimate" = test$estimate,
"ci_lo" = test$conf.int[1],
"ci_hi" = test$conf.int[2])
return(output_df)
}
View(ToothGrowth)
View(df)
View(srt_t_test)
run_t_test
library(here)
library(tidyverse)
library(janitor)
library(fs)
library(lme4)
# load tidy data
source(here("scripts", "05_load_data.R"))
# Run t-test using helper function (see code in `00_helpers.R`.
p1_tap_srt = run_t_test(df = srt, p_id = "P1E", segment = "tap") %>%
mutate(task = "srt")
p1_trill_srt = run_t_test(df = srt, p_id = "P1E", segment = "trill") %>%
mutate(task = "srt")
p3_tap_srt = run_t_test(df = srt, p_id = "P3E", segment = "tap") %>%
mutate(task = "srt")
p3_trill_srt = run_t_test(df = srt, p_id = "P3E", segment = "trill") %>%
mutate(task = "srt")
p5_tap_srt = run_t_test(df = srt, p_id = "P5E", segment = "tap") %>%
mutate(task = "srt")
p5_trill_srt = run_t_test(df = srt, p_id = "P5E", segment = "trill") %>%
mutate(task = "srt")
# combine output into df for visualizations and reporting
srt_t_df <- rbind(p1_tap_srt, p1_trill_srt,
p3_tap_srt, p3_trill_srt,
p5_tap_srt, p5_trill_srt)
srt_t_df %>%
write.csv(here("data", "tidy", "srt_t_tests.csv"))
# descriptive stuff
srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
group_by(participant, is_trill, time) %>%
summarize(mean = mean(as.numeric(duration)))
# plots
srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
ggplot(aes(x = as.numeric(duration), y = time, color = is_trill)) + geom_boxplot() +
facet_wrap(~participant)
View(srt_t_df)
View(srt_t_test)
View(srt_t_test)
View(t1_na)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(here)
library(tidyverse)
library(kableExtra)
source(here("scripts", "05_load_data.R"))
tap_df <- srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
group_by(participant, is_trill, time) %>%
filter(is_trill == "tap") %>%
summarize(mean = mean(as.numeric(duration))) %>%
pivot_wider(names_from = participant, values_from = mean) %>%
dplyr::select(time, P1E, P3E, P5E) %>%
arrange(desc(time))
tap_df$is_trill <- NULL
tap_df %>%
knitr::kable(digits = 2, caption = "Table 1: Average duration of tap productions during pre and post-tests per participant") %>%
kable_styling(full_width = FALSE)
trill_df <- srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
group_by(participant, is_trill, time) %>%
filter(is_trill == "trill") %>%
summarize(mean = mean(as.numeric(duration))) %>%
pivot_wider(names_from = participant, values_from = mean) %>%
dplyr::select(time, P1E, P3E, P5E) %>%
arrange(desc(time))
trill_df$is_trill <- NULL
trill_df %>%
knitr::kable(digits = 2, caption = "Table 2: Average duration of trill productions during pre and post-tests per participant") %>%
kable_styling(full_width = FALSE)
srt_t_test %>%
filter(tap_or_trill == "tap") %>%
select(Participant, df, p_val, t_val, estimate, ci_lo, ci_hi) %>%
knitr::kable(digits = 3, caption = "
Table 3: Results of Paired t-tests of taps comparing duration during pre and post tests") %>%
kable_styling(full_width = FALSE)
srt_t_test %>%
filter(tap_or_trill == "trill") %>%
select(Participant, df, p_val, t_val, estimate, ci_lo, ci_hi) %>%
knitr::kable(digits = 3, caption = "Table 4: Results of Paired t-tests of trills comparing duration during pre and post tests") %>%
kable_styling(full_width = FALSE)
level_order <- c('PRE', 'POST')
srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
filter(is_trill == "tap") %>%
ggplot(aes(x = factor(time, level = level_order), y = as.numeric(duration), color = is_trill)) + geom_boxplot(fill = "deepskyblue4", color = "black", outlier.size = 0) +
facet_wrap(~participant) + xlab("Test Time") + ylab("Rhotic Duration (ms)") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") + theme(legend.position = "none")  + ggtitle("Taps") + + ggsave(here("docs", "figs", "figure1.png"))
level_order <- c('PRE', 'POST')
srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
filter(is_trill == "tap") %>%
ggplot(aes(x = factor(time, level = level_order), y = as.numeric(duration), color = is_trill)) + geom_boxplot(fill = "deepskyblue4", color = "black", outlier.size = 0) +
facet_wrap(~participant) + xlab("Test Time") + ylab("Rhotic Duration (ms)") +
theme_bw() +
theme(panel.background = element_rect(fill = "grey79"),
legend.position = "bottom") + theme(legend.position = "none")  + ggtitle("Taps") + ggsave(here("docs", "figs", "figure1.png"))
View(srt)
srt %>%
filter(!is.na(occlusions))
occ_srt <- srt %>%
filter(!is.na(occlusions))
View(occ_srt)
unique(occ_srt$occlusions)
occ_srt <- srt %>%
filter(!is.na(occlusions))
occ_srt %>%
group_by(occlusions) %>%
summarize(n = n())
desc <- occ_srt %>%
group_by(occlusions) %>%
summarize(n = n())
View(desc)
desc <- occ_srt %>%
group_by(occlusions, time, is_trill) %>%
summarize(n = n())
View(desc)
library(here)
library(tidyverse)
library(janitor)
library(fs)
# 05 load data
library(here)
srt <- read.csv(here("data", "tidy", "srt_data.csv"))
para <- read.csv(here("data", "tidy", "para_data.csv"))
lectura <- read.csv(here("data", "tidy", "lectura_tidy.csv"))
image <- read.csv(here("data", "tidy", "image_df.csv"))
View(srt)
View(srt)
View(para)
f = 2
f <- 2
View(para)
run_t_test = function(df, p_id, segment)
{
t1 <- df %>%
filter(participant == p_id) %>%
filter(is_trill == segment) %>%
filter(time == "PRE")
t2 <- df %>%
filter(participant == p_id) %>%
filter(is_trill == segment) %>%
filter(time == "POST")
t1_na <- t1 %>%
filter(duration == "N/A" | duration == "N/A /d/")
t2_na <- t2 %>%
filter(duration == "N/A" | duration == "N/A /d/")
remove_list <- rbind(t1_na, t2_na)
t2_filt = t2 %>%
filter(!trial %in% remove_list$trial)
t1_filt = t1 %>%
filter(!trial %in% remove_list$trial)
t2_filt = t2_filt %>% filter(trial %in% t1_filt$trial)
t1_filt = t1_filt %>% filter(trial %in% t2_filt$trial)
t1_filt$duration <- as.numeric(t1_filt$duration)
t2_filt$duration <- as.numeric(t2_filt$duration)
test <- t.test(t2_filt$duration, t1_filt$duration, paired = TRUE)
output_df = data.frame("Participant" = p_id,
"tap_or_trill" = segment,
"p_val" = test$p.value,
"df" = test$parameter,
"t_val" = test$statistic,
"estimate" = test$estimate,
"ci_lo" = test$conf.int[1],
"ci_hi" = test$conf.int[2])
return(output_df)
}
# A script to tidy individual participant data for the sentence reading task
# Libraries
# 01 - a script to pull the data for para only in the sentence reading task
library(here)
library(tidyverse)
library(janitor)
library(fs)
list_of_files <- list.files(path = here("data", "raw"), recursive = TRUE,
pattern = "\\.csv$",
full.names = TRUE) %>%
as.data.frame()
df_f <- character()
for(thisRun in 1:nrow(list_of_files))
{
df <- read.csv(list_of_files$.[thisRun]) %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
select(c(1:6)) %>%
slice(1:158) %>%
mutate("id" = list_of_files$.[thisRun]) %>%
mutate(col = 1:158)
colnames(df) <- c('sentence','token1','token2', 'duration1','duration2',
'occlusions', 'id', 'trial')
df_f <- rbind(df_f, df)
}
empty_as_na <- function(x){
if("factor" %in% class(x)) x <- as.character(x) ## since ifelse wont work with factors
ifelse(as.character(x)!="", x, NA)
}
srt_tidy <- df_f %>%
mutate_each(funs(empty_as_na)) %>%
mutate(is_trill = case_when(!is.na(duration1) ~ "tap",
!is.na(duration2) ~ "trill")) %>%
unite("duration", duration1:duration2) %>%
unite("token", token1:token2) %>%
mutate(duration = str_remove(duration, "NA_")) %>%
mutate(duration = str_remove(duration, "_NA")) %>%
mutate(token = str_remove(token, "_NA")) %>%
mutate(token = str_remove(token, "NA_")) %>%
filter(!is.na(duration)) %>%
mutate(id =
str_remove(id, "/Users/kyleparrish/Documents/GitHub/andres_rojas_consult/data/raw/")) %>%
mutate(id = str_remove(id, ".csv")) %>%
separate(id, into = c("participant", "level", "time"))
srt_tidy %>%
group_by(participant, time, is_trill) %>%
summarize(n = n())
srt_tidy %>%
write.csv(here("data", "tidy", "srt_data.csv"))
library(here)
library(tidyverse)
library(janitor)
library(fs)
library(lme4)
# load tidy data
source(here("scripts", "05_load_data.R"))
# Run t-test using helper function (see code in `00_helpers.R`.
p1_tap_srt = run_t_test(df = srt, p_id = "P1E", segment = "tap") %>%
mutate(task = "srt")
p1_trill_srt = run_t_test(df = srt, p_id = "P1E", segment = "trill") %>%
mutate(task = "srt")
p3_tap_srt = run_t_test(df = srt, p_id = "P3E", segment = "tap") %>%
mutate(task = "srt")
p3_trill_srt = run_t_test(df = srt, p_id = "P3E", segment = "trill") %>%
mutate(task = "srt")
p5_tap_srt = run_t_test(df = srt, p_id = "P5E", segment = "tap") %>%
mutate(task = "srt")
p5_trill_srt = run_t_test(df = srt, p_id = "P5E", segment = "trill") %>%
mutate(task = "srt")
# combine output into df for visualizations and reporting
srt_t_df <- rbind(p1_tap_srt, p1_trill_srt,
p3_tap_srt, p3_trill_srt,
p5_tap_srt, p5_trill_srt)
srt_t_df %>%
write.csv(here("data", "tidy", "srt_t_tests.csv"))
# descriptive stuff
srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
group_by(participant, is_trill, time) %>%
summarize(mean = mean(as.numeric(duration)))
# plots
srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
ggplot(aes(x = as.numeric(duration), y = time, color = is_trill)) + geom_boxplot() +
facet_wrap(~participant)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
rt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
group_by(participant, is_trill, time) %>%
filter(is_trill == "tap")
srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
group_by(participant, is_trill, time) %>%
filter(is_trill == "tap") %>%
summarize(mean = mean(as.numeric(duration)))
p6_tap_srt = run_t_test(df = srt, p_id = "P6E", segment = "tap") %>%
mutate(task = "srt")
p6_trill_srt = run_t_test(df = srt, p_id = "P6E", segment = "trill") %>%
mutate(task = "srt")
library(here)
library(tidyverse)
library(janitor)
library(fs)
library(lme4)
# load tidy data
source(here("scripts", "05_load_data.R"))
# Run t-test using helper function (see code in `00_helpers.R`.
p1_tap_srt = run_t_test(df = srt, p_id = "P1E", segment = "tap") %>%
mutate(task = "srt")
p1_trill_srt = run_t_test(df = srt, p_id = "P1E", segment = "trill") %>%
mutate(task = "srt")
p3_tap_srt = run_t_test(df = srt, p_id = "P3E", segment = "tap") %>%
mutate(task = "srt")
p3_trill_srt = run_t_test(df = srt, p_id = "P3E", segment = "trill") %>%
mutate(task = "srt")
p5_tap_srt = run_t_test(df = srt, p_id = "P5E", segment = "tap") %>%
mutate(task = "srt")
p5_trill_srt = run_t_test(df = srt, p_id = "P5E", segment = "trill") %>%
mutate(task = "srt")
p6_tap_srt = run_t_test(df = srt, p_id = "P6E", segment = "tap") %>%
mutate(task = "srt")
p6_trill_srt = run_t_test(df = srt, p_id = "P6E", segment = "trill") %>%
mutate(task = "srt")
# combine output into df for visualizations and reporting
srt_t_df <- rbind(p1_tap_srt, p1_trill_srt,
p3_tap_srt, p3_trill_srt,
p5_tap_srt, p5_trill_srt,
p6_tap_srt, p6_trill_srt)
srt_t_df %>%
write.csv(here("data", "tidy", "srt_t_tests.csv"))
# descriptive stuff
srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
group_by(participant, is_trill, time) %>%
summarize(mean = mean(as.numeric(duration)))
# plots
srt %>%
filter(!duration == "N/A" & !duration == "N/A /d/") %>%
ggplot(aes(x = as.numeric(duration), y = time, color = is_trill)) + geom_boxplot() +
facet_wrap(~participant)
